name: Comprehensive Testing & Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '18'

jobs:
  # ================================================================
  # Job 1: Unit Tests
  # ================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Download dependencies
        run: go mod download
      
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
      
      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.html

  # ================================================================
  # Job 2: Integration Tests
  # ================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Start test database
        run: |
          mkdir -p data
          touch data/test.db
      
      - name: Run integration tests
        run: |
          chmod +x scripts/e2e-tests.sh
          PORT=8082 DB_PATH=./data/test.db go run main.go &
          sleep 5
          BASE_URL=http://localhost:8082 bash scripts/e2e-tests.sh

  # ================================================================
  # Job 3: Security Scanning
  # ================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -fmt=json -out=gosec-report.json ./...
        continue-on-error: true
      
      - name: Run Nancy (dependency checker)
        run: |
          go list -json -m all | docker run --rm -i sonatypecommunity/nancy:latest sleuth
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        run: |
          chmod +x scripts/check-secrets.sh
          bash scripts/check-secrets.sh
      
      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            gosec-report.json
            trivy-results.sarif

  # ================================================================
  # Job 4: Code Quality
  # ================================================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
      
      - name: Run golint
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...
        continue-on-error: true
      
      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run: gofmt -s -w ."
            gofmt -s -l .
            exit 1
          fi

  # ================================================================
  # Job 5: Build & Docker
  # ================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        run: |
          CGO_ENABLED=1 go build -ldflags="-w -s" -o ./bin/app .
      
      - name: Test binary
        run: |
          ./bin/app --version || echo "Binary built successfully"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: doctorhealthy1-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-binary
          path: ./bin/app

  # ================================================================
  # Job 6: Performance Tests
  # ================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install vegeta
        run: go install github.com/tsenart/vegeta/v12@latest
      
      - name: Run benchmarks
        run: go test -bench=. -benchmem ./... | tee benchmark-results.txt
      
      - name: Start application
        run: |
          PORT=8083 go run main.go &
          sleep 5
      
      - name: Run load tests
        run: |
          chmod +x scripts/load-test.sh
          BASE_URL=http://localhost:8083 DURATION=10 bash scripts/load-test.sh
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmark-results.txt
            coverage/load-tests/

  # ================================================================
  # Job 7: Deployment Check
  # ================================================================
  deployment-check:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    needs: [build, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate deployment checklist
        run: |
          echo "✓ All tests passed"
          echo "✓ Security scan completed"
          echo "✓ Performance tests passed"
          echo "✓ Build successful"
          echo "Ready for deployment"
      
      - name: Create deployment summary
        run: |
          cat > deployment-summary.md <<EOF
          # Deployment Summary
          
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Tests**: ✓ Passed
          - **Security**: ✓ Scanned
          - **Performance**: ✓ Validated
          - **Build**: ✓ Successful
          
          Ready for production deployment.
          EOF
      
      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md

  # ================================================================
  # Job 8: Test Summary
  # ================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan, code-quality, performance-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.integration-tests.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ] && \
             [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "## ✅ All Tests Passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
          fi
